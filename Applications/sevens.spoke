macro ;clone &;=>|(rrb)
	rrb=>|(a89)
		yield (a89)
		
macro ;&<&>;=>|(items,expressionc)
	items=>|(_abb)
		if expressionc(_abb)
			return _abb
	return null

macro ;[&>>&];=>|(a333,v333)
	(a333<=v333)=>
		yield a333
		a333=a333+1

macro ;&{&};=>|(items1,expression)
	items1=>|(_ff)
		if expression(_ff)
			yield return _ff

macro ;&++;=>|(ref index)
	f=index
	index=index+1
	return f-1

macro ;&+=&;=>|(ref ba,gi)
	fjf=ba
	ba=ba+gi
	return fjf

macro ;&--;=>|(ref index)
	f=index
	index=index-1
	return f+1
	
macro ;&-=&;=>|(ref index,v)
	index=index-v
	return index

macro ;&**&;=>|(str,num)
	a=0
	strb=""
	(a<=num)=>
		strb=strb+str
		a=a+1
	return strb

macro ;&?&:&;=>|(con,l1,l2)
	if con
		return l1
	else
		return l2

class Main 

	spades=create Pile("spades")
	clubs=create Pile("clubs")
	hearts=create Pile("hearts")
	diamonds=create Pile("diamonds")
	sorter={}
	
	cardgame=create CardGame()


	def createUser(userIndex,user)
		ua=create TableArea()

	def ()
		
		


		cardgame.mainArea.numberOfCardsHorizontal=4
		cardgame.mainArea.numberOfCardsVertical=13
		cardgame.mainArea.dimensions=create Rectangle(){x=150,y=160,width=640,height=350}
		
		clubsSpace=create TableSpace(){visible=true,stack=false,name="Clubs",xPosition=1,yPosition=1,width=13,height=1,rotateAngle=0-90,pileName="clubs"}
		cardgame.mainArea.spaces.add(clubsSpace)
		

		heartsSpace=create TableSpace(){visible=true,stack=false,name="Hearts",xPosition=1,yPosition=2,width=13,height=1,rotateAngle=0-90,pileName="hearts"}
		cardgame.mainArea.spaces.add(heartsSpace)
		

		diamondsSpace=create TableSpace(){visible=true,stack=false,name="Diamonds",xPosition=1,yPosition=3,width=13,height=1,rotateAngle=0-90,pileName="diamonds"}
		cardgame.mainArea.spaces.add(diamondsSpace)
		

		spadesSpace=create TableSpace(){visible=true,stack=false,name="Spades",xPosition=1,yPosition=4,width=13,height=1,rotateAngle=0-90,pileName="spades"}
		cardgame.mainArea.spaces.add(spadesSpace)
		
		cardgame.mainArea.textAreas.add(create TableTextArea(){name="SpadesText",xPosition=0,yPosition=1,text="Spades",rotateAngle=0-90})
		cardgame.mainArea.textAreas.add(create TableTextArea(){name="ClubsText",xPosition=0,yPosition=2,text="Clubs",rotateAngle=0-90})
		cardgame.mainArea.textAreas.add(create TableTextArea(){name="HeartsText",xPosition=0,yPosition=3,text="Hearts",rotateAngle=0-90})
		cardgame.mainArea.textAreas.add(create TableTextArea(){name="DiamondsText",xPosition=0,yPosition=4,text="Diamonds",rotateAngle=0-90})
		
		sorter=|(left,right)=>
			return left.Value>right.Value

		u=runGame()

		writeLine(u.Name,"Is the winner!")


	def shuffle(arbs)
	
		indes=0
		vafb=clone arbs 

		arbs=>|(fs)
			vm=nextRandom(0,vafb.length())
			d=vafb[indes]
			vafb[indes]=vafb[vm]
			indes++
			vafb[vm]=d

		return vafb

	def runGame()
		[1>>20]=>
			cardgame.deck=shuffle(cardgame.deck)

		(cardgame.deck.length()>0)=>
			cardgame.users=>|(u)
				if cardgame.deck.length()>0
					u.Cards.add(cardgame.deck[0])
					cardgame.deck.remove(cardgame.deck[0])
		 
		CardTypes=["","Hearts","Clubs","Diamonds","Spades"]
		CardNames=["","Ace","Deuce","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King"]

		readLine()

		(1<2)=>
			cardgame.users=>|(u)
				usable=[u.Cards{|(_)=>
					return _.Type==4 && (_.Value==7 || this.spades.Cards<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				},u.Cards{|(_)=>
					return _.Type==2 && (_.Value==7 || this.clubs.Cards<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				},u.Cards{|(_)=>
					return _.Type==1 && (_.Value==7 || this.hearts.Cards<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				},u.Cards{|(_)=>
					return _.Type==3 && (_.Value==7 || this.diamonds.Cards<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				}]


				
				answers=[]
				answers.add("Skip")
				sortArray(usable,sorter)=>|(card)
					answers.add(CardNames[card.Value]+" Of "+(CardTypes[card.Type]))

				cardgame.piles.clear()
				cardgame.piles.add(spades)
				cardgame.piles.add(clubs)
				cardgame.piles.add(diamonds)
				cardgame.piles.add(hearts)

				de=askQuestion(u,"Which card would you like to play?",answers,cardgame)



				if de>0
					rm=usable[de-1]
					if rm.Type==4
						u.Cards.remove(rm)
						this.spades.Cards.add(rm)
					if rm.Type==2
						u.Cards.remove(rm)
						this.clubs.Cards.add(rm)
					if rm.Type==1
						u.Cards.remove(rm)
						this.hearts.Cards.add(rm)
					if rm.Type==3
						u.Cards.remove(rm)
						this.diamonds.Cards.add(rm)
				if u.Cards.length()==0
					return u
		return {Cards=[],Name=""}
				


	def sortArray(vr,fbc)
		ar=vr
		i=ar.length()-1
		(i>=0)=>
			j=1
			(j<=i)=>
				if(fbc(ar[j-1],ar[j]))
					temp=ar[j-1]
					ar[j-1]=ar[j]
					ar[j]=temp
				j++
			i-- 
		
		return ar

class CardGame
	users=[]
	deck=[]
	piles=[]
	mainArea=create TableArea()
	userAreas=[]
	def ()
		userAreas.add(create TableArea())
		userAreas.clear()
		[1>>4]=>|(am)
			[1>>13]=>|(ab)
				deck.add({Value=ab,Type=am})
		users.add({Cards=[],Name=""})
		users.clear()
		populateUsers(users)


class Pile
	Cards=[]
	Name=""

	def (name)
		Name=name
		Cards.add(create Card())
		Cards.clear()

class Card
	Value=0
	Talue=0

class TableArea
	numberOfCardsHorizontal=1
	numberOfCardsVertical=1
	dimensions=create Rectangle()
	spaces=[]
	textAreas=[]

class TableSpace
	visible=true
	stackCards=true
	drawCardsBent=false
	name=""
	xPosition=0
	yPosition=0
	width=1
	height=1
	pileName=""

class TableTextArea
	name=""
	xPosition=0
	yPosition=0
	rotateAngle=0
	text=""

Class Rectangle
	x=0
	y=0
	width=1
	height=1
