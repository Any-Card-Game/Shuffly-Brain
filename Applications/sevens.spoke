
macro ;clone &;=>|(rrb)
	rrb=>|(a89)
		yield (a89)
		
macro ;&<&>;=>|(items,expressionc)
	items=>|(_abb)
		if expressionc(_abb)
			return _abb
	return null

macro ;[&>>&];=>|(a333,v333)
	(a333<=v333)=>
		yield a333
		a333=a333+1

macro ;&{&};=>|(items1,expression)
	items1=>|(_ff)
		if expression(_ff)
			yield return _ff


macro ;&++;=>|(ref index)
	f=index
	index=index+1
	return f-1

macro ;&+=&;=>|(ref ba,gi)
	fjf=ba
	ba=ba+gi
	return fjf

macro ;&--;=>|(ref index)
	f=index
	index=index-1
	return f+1
  

	
macro ;&-=&;=>|(ref index,v)
	index=index-v
	return index


macro ;&**&;=>|(str,num)
	a=0
	strb=""
	(a<=num)=>
		strb=strb+str
		a=a+1
	return strb


macro ;&?&:&;=>|(con,l1,l2)
	if con
		return l1
	else
		return l2
 


class Main 

	spades=[{Value=0,Type=0}]
	clubs=[{Value=0,Type=0}]
	hearts=[{Value=0,Type=0}]
	diamonds=[{Value=0,Type=0}]
	dbc={}	
	
	
	cardgame=create CardGame()

	def ()

		spades.clear()
		clubs.clear()
		hearts.clear()
		diamonds.clear()

		dbc=|(left,right)=>
			return left.Value>right.Value

		u=runGame()

		writeLine(u.Name,"Is the winner!")


	def shuffle(arbs)
	
		indes=0
		vafb=clone arbs 

		arbs=>|(fs)
			vm=nextRandom(0,vafb.length())
			d=vafb[indes]
			vafb[indes]=vafb[vm]
			indes++
			vafb[vm]=d

		return vafb

	def runGame()
		

		[1>>20]=>
			cardgame.deck=shuffle(cardgame.deck)

		(cardgame.deck.length()>0)=>
			cardgame.users=>|(u)
				if cardgame.deck.length()>0
					u.Cards.add(cardgame.deck[0])
					cardgame.deck.remove(cardgame.deck[0])
		 
		CardTypes=["","Hearts","Clubs","Diamonds","Spades"]
		CardNames=["","Ace","Deuce","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King"]
	

		(1<2)=>
			cardgame.users=>|(u)
				usable=[u.Cards{|(_)=>
					return _.Type==4 && (_.Value==7 || spades<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				},u.Cards{|(_)=>
					return _.Type==2 && (_.Value==7 || clubs<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				},u.Cards{|(_)=>
					return _.Type==1 && (_.Value==7 || hearts<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				},u.Cards{|(_)=>
					return _.Type==3 && (_.Value==7 || diamonds<|(__)=> 
						return __.Value==_.Value+1 || __ .Value==_.Value-1
					>!=null)
				}]


				
				answers=[]
				answers.add("Skip")
				sortArray(usable,dbc)=>|(card)
					answers.add(CardNames[card.Value]+"Of"+(CardTypes[card.Type]))

				de=askQuestion(u,"Which card would you like to play?",answers)



				if de>0
					rm=usable[de-1]
					if rm.Type==4
						u.Cards.remove(rm)
						spades.add(rm)
					if rm.Type==2
						u.Cards.remove(rm)
						clubs.add(rm)
					if rm.Type==1
						u.Cards.remove(rm)
						hearts.add(rm)
					if rm.Type==3
						u.Cards.remove(rm)
						diamonds.add(rm)
				if u.Cards.length()==0
					return u
		return {Cards=[],Name=""}
				


	def sortArray(vr,fbc)
		ar=vr
		i=ar.length()-1
		(i>=0)=>
			j=1
			(j<=i)=>
				if(fbc(ar[j-1],ar[j]))
					temp=ar[j-1]
					ar[j-1]=ar[j]
					ar[j]=temp
				j++
			i-- 
		
		return ar

class CardGame
	users=[]
	deck=[]
	def ()
		[1>>4]=>|(am)
			[1>>13]=>|(ab)
				deck.add({Value=ab,Type=am})
		users.add({Cards=[],Name=""})
		users.clear()
		populateUsers(users)
